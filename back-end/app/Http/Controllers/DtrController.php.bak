<?php

namespace App\Http\Controllers;

use App\Dtr;
use App\CsvData;
use App\Employee;
use Maatwebsite\Excel\Facades\Excel;
use Illuminate\Http\Request;
use App\Http\Requests\CsvImportRequest;


class DtrController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        return view('admin.dtr.index');
    }

    // Parse CSV Import and send back data to dtr/index.blade.php
    public function parseImport(CsvImportRequest $request)
    {
        $path = $request->file('csv_file')->getPathName();

        if ($request->has('header')) {
            $data = Excel::toArray(new CsvImportRequest, request()->file('csv_file'))[0];
        } else {
            $data = array_map('str_getcsv', file($path));
        }

        // if data is greater than 0 continue else go back to dtr/index
        if (count($data) > 0) {
            if ($request->has('header')) {
                $csv_header_fields = [];
                foreach ($data[0] as $key => $value) {
                    $csv_header_fields[] = $key;
                }
            }

            /*  Slice the array.
                Each row contains data that start from index 0 and end with index 28.
                dd($csv_data); to show data.
            */
            $csv_data = array_slice($data, 0, 3);

            // Remove first row from the array
            $csv_data = array_slice($data, 1);

            // dd($csv_data[0][0]);


            // Create database entry that contains csv data
            $csv_data_file = CsvData::create([
                'csv_filename' => $request->file('csv_file')->getClientOriginalName(),
                'csv_header' => $request->has('header'),
                'csv_data' => json_encode($data)
            ]);

            /////////////// Added on 06/23/2020 /////////////////////
            $emp_numbers=[];
            foreach($csv_data as $row){
                $emp_numbers[] = $row[0];
            }

            // Initial Query
            $employee = Employee::where('emp_num', $emp_numbers[0]);
            $i = 0;
            // Add new query if emp_num is more than 1
            foreach ($emp_numbers as $key => $value) {
                $i++;
                if ($i > count($emp_numbers) - 1) {
                } else {
                    $employee->orWhere('emp_num', $emp_numbers[$i]);
                }
            }

            // Get result
            $employees = $employee->get();
            $employees = $employees->map->only(['emp_num', 'last_name', 'first_name', 'middle_name'])->all();
            $results = [];
            foreach($employees as $employee){
                $results[] = array_values($employee);
            }
            //////////////////////////////////////////////////////////

        } else {
            return redirect()->back();
        }
        // Added results
        return view('admin.dtr.import_process', compact('csv_header_fields', 'csv_data', 'csv_data_file', 'results'));
    }

    // public function processImport(Request $request)
    // {
    //     // get CSV JSON data from database
    //     $data = CsvData::find($request->csv_data_file_id);

    //     // Decode CSV data using json_decode
    //     $csv_data = json_decode($data->csv_data, true);

    //     // Remove first row from the array
    //     $csv_data = array_slice($csv_data, 1);


    //     // Get total number of row of $csv_data
    //     $emp_num = [];
    //     foreach($csv_data as $row){
    //         $count = 0;
    //         if($count == 0){
    //             $emp_num[] = $row[0];
    //         }
    //     }

    //     // Initial Query
    //     $employee = Employee::where('emp_num', $emp_num[0]);
    //     $i = 0;
    //     // Add new query if emp_num is more than 1
    //     foreach ($emp_num as $key => $value) {
    //         $i++;
    //         if($i > count($emp_num)-1){

    //         }else{
    //             $employee->orWhere('emp_num', $emp_num[$i]);
    //         }
    //     }

    //     // Get result
    //     $results = $employee->get();

    //     // $request->fields = array_flip($request->fields);
    //     // $count = 0;
    //     // foreach ($csv_data as $row) {
    //     //     // Skip first row which is the headers
    //     //     $count++;
    //     //     if($count <= 1){
    //     //         continue;
    //     //     }

    //     //     // Create new Dtr model
    //     //     // $dtr = new Dtr();
    //     //     // foreach (config('app.db_fields') as $index => $field) {
    //     //     //     $dtr->$field = $row[$request->fields[$field]];
    //     //     // }

    //     //     // Save to database
    //     //     // $dtr->save();
    //     // }
    //     return view('admin.dtr.import_process', compact('csv_data', 'results'));
    // }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Dtr  $dtr
     * @return \Illuminate\Http\Response
     */
    public function show(Dtr $dtr)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\Dtr  $dtr
     * @return \Illuminate\Http\Response
     */
    public function edit(Dtr $dtr)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Dtr  $dtr
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, Dtr $dtr)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Dtr  $dtr
     * @return \Illuminate\Http\Response
     */
    public function destroy(Dtr $dtr)
    {
        //
    }
}
